#include "mainwindow.h"
#include <QMessageBox>
#include <QInputDialog>

MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent), process(new QProcess(this)), userExists(false)
{
    QWidget *centralWidget = new QWidget(this);
    QVBoxLayout *mainLayout = new QVBoxLayout(centralWidget);

    // –ö–Ω–æ–ø–∫–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º layout
    QHBoxLayout *buttonLayout = new QHBoxLayout();
    
    startButton = new QPushButton("–ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", this);
    buttonLayout->addWidget(startButton);
    
    settingsButton = new QPushButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Apple ID", this);
    settingsButton->setEnabled(false);
    buttonLayout->addWidget(settingsButton);
    
    createAdminButton = new QPushButton("–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞", this);
    buttonLayout->addWidget(createAdminButton);
    
    createUserButton = new QPushButton("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", this);
    buttonLayout->addWidget(createUserButton);
    
    mainLayout->addLayout(buttonLayout);

    // –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
    logOutput = new QTextEdit(this);
    logOutput->setReadOnly(true);
    mainLayout->addWidget(logOutput);

    setCentralWidget(centralWidget);
    setWindowTitle("Mac Diagnostic Tool");
    resize(800, 600);

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    diagnosticManager = new DiagnosticManager(this);
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
    connect(startButton, &QPushButton::clicked, this, &MainWindow::startDiagnostics);
    connect(settingsButton, &QPushButton::clicked, this, &MainWindow::openAppleIDSettings);
    connect(createAdminButton, &QPushButton::clicked, this, &MainWindow::createAdminUser);
    connect(createUserButton, &QPushButton::clicked, this, &MainWindow::createRegularUser);
    connect(diagnosticManager, &DiagnosticManager::progressUpdated, 
            this, [this](int, const QString &message) { updateLog(message); });
    connect(diagnosticManager, &DiagnosticManager::diagnosticsFinished, 
            this, &MainWindow::diagnosticsCompleted);
            
    connect(process, &QProcess::readyReadStandardOutput, this, [this]() {
        QString output = process->readAllStandardOutput();
        updateLog(output);
    });
    
    connect(process, &QProcess::readyReadStandardError, this, [this]() {
        QString error = process->readAllStandardError();
        updateLog("–û—à–∏–±–∫–∞: " + error);
    });
}

void MainWindow::startDiagnostics()
{
    startButton->setEnabled(false);
    settingsButton->setEnabled(false);
    logOutput->clear();
    
    updateLog(" –ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Mac...\n");
    diagnosticManager->runDiagnostics();
}

void MainWindow::updateLog(const QString &message)
{
    logOutput->append(message);
}

void MainWindow::diagnosticsCompleted(bool success, const DiagnosticResults &results)
{
    startButton->setEnabled(true);
    settingsButton->setEnabled(results.hasAppleID);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    updateLog("\n" + results.toString());
    
    if (success) {
        QMessageBox::information(this, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è Mac –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.");
    } else {
        QMessageBox::warning(this, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–í —Ö–æ–¥–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. "
                                                "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.");
    }
}

void MainWindow::openAppleIDSettings()
{
    updateLog("\nüîß –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Apple ID...");
    
    QProcess *settingsProcess = new QProcess(this);
    connect(settingsProcess, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
            [=](int exitCode, QProcess::ExitStatus exitStatus) {
        if (exitCode == 0 && exitStatus == QProcess::NormalExit) {
            updateLog("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Apple ID –æ—Ç–∫—Ä—ã—Ç—ã");
        } else {
            updateLog("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
        }
        settingsProcess->deleteLater();
    });

    QStringList args;
    args << "x-apple.systempreferences:com.apple.preferences.AppleIDPrefPane";
    settingsProcess->start("open", args);
}

void MainWindow::createAdminUser()
{
    int result = QMessageBox::warning(this, "–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                                    "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?",
                                    QMessageBox::Yes | QMessageBox::No);
    
    if (result == QMessageBox::Yes) {
        createUser("admin", "dveri123x", true);
    }
}

void MainWindow::createRegularUser()
{
    int result = QMessageBox::warning(this, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                    "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user —Å –ø–∞—Ä–æ–ª–µ–º 1111?",
                                    QMessageBox::Yes | QMessageBox::No);
    
    if (result == QMessageBox::Yes) {
        createUser("user", "1111", false);
    }
}

void MainWindow::createUser(const QString &username, const QString &password, bool isAdmin)
{
    bool ok;
    QString sudoPass = QInputDialog::getText(this, "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                                           "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                                           QLineEdit::Password,
                                           QString(), &ok);
    if (!ok || sudoPass.isEmpty()) {
        updateLog("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
        return;
    }

    updateLog(QString("\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %1...").arg(username));
    userExists = false;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è sudo
    QProcess *sudoProcess = new QProcess(this);
    
    connect(sudoProcess, &QProcess::started, [this, sudoProcess, sudoPass]() {
        updateLog("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...");
        sudoProcess->write(QString(sudoPass + "\n").toUtf8());
    });
    
    connect(sudoProcess, &QProcess::readyReadStandardOutput, [this, sudoProcess]() {
        QString output = sudoProcess->readAllStandardOutput();
        if (!output.contains("Password:")) {
            updateLog("üìù " + output.trimmed());
        }
    });
    
    connect(sudoProcess, &QProcess::readyReadStandardError, [this, sudoProcess]() {
        QString error = sudoProcess->readAllStandardError();
        if (error.contains("already exists")) {
            userExists = true;
            updateLog("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        } else if (!error.contains("Password:")) {
            updateLog("‚ùå " + error.trimmed());
        }
    });
    
    connect(sudoProcess, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
            [this, username, sudoProcess](int exitCode, QProcess::ExitStatus exitStatus) {
        if (exitCode == 0 && exitStatus == QProcess::NormalExit && !userExists) {
            updateLog(QString("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %1 —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ").arg(username));
        } else if (!userExists && exitCode != 0) {
            updateLog(QString("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %1 (–∫–æ–¥: %2)").arg(username).arg(exitCode));
        }
        sudoProcess->deleteLater();
    });

    QStringList args;
    args << "-S" << "sysadminctl"
         << "-addUser" << username
         << "-password" << password;
    
    if (isAdmin) {
        args << "-admin";
    }

    sudoProcess->start("sudo", args);
}

void MainWindow::executeCommand(const QString &command, const QStringList &args)
{
    process->start(command, args);
    if (!process->waitForStarted()) {
        updateLog(" –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã");
        return;
    }
    
    process->waitForFinished();
    
    if (process->exitCode() != 0) {
        updateLog(" –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã");
    } else {
        updateLog(" –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
    }
}
