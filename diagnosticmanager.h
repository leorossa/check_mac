#ifndef DIAGNOSTICMANAGER_H
#define DIAGNOSTICMANAGER_H

#include <QObject>
#include <QProcess>
#include <QTimer>
#include <QDebug>

struct DiagnosticResults {
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç–∞—Ä–µ–∏
    int cycleCounts = 0;
    int maxCapacity = 0;
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Apple ID
    bool hasAppleID = false;
    QString appleIDEmail;
    
    // Find My Mac
    bool findMyMacEnabled = false;
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–∞
    bool diskCheckPassed = false;
    QString diskStatus;
    
    // –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    QStringList recommendations;
    
    QString toString() const {
        QString result = "üìä –ò—Ç–æ–≥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:\n\n";
        QStringList allRecommendations = recommendations;
        
        // –ë–∞—Ç–∞—Ä–µ—è
        result += "üîã –ë–∞—Ç–∞—Ä–µ—è:\n";
        result += QString("   ‚Ä¢ –¶–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞: %1\n").arg(cycleCounts);
        result += QString("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ë–º–∫–æ—Å—Ç—å: %1%\n\n").arg(maxCapacity);
        
        // Apple ID
        result += "üçé Apple ID:\n";
        if (hasAppleID) {
            result += QString("   ‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç: %1\n").arg(appleIDEmail);
            if (findMyMacEnabled) {
                allRecommendations << "–û—Ç–∫–ª—é—á–∏—Ç–µ Find My Mac –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞";
            }
        } else {
            result += "   ‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
        }
        result += "\n";
        
        // –î–∏—Å–∫
        result += "üíΩ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞:\n";
        if (diskCheckPassed) {
            result += "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞\n";
        } else {
            result += QString("   ‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: %1\n").arg(diskStatus);
        }
        result += "\n";
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (!allRecommendations.isEmpty()) {
            result += "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n";
            for (const QString &rec : allRecommendations) {
                result += QString("   ‚Ä¢ %1\n").arg(rec);
            }
        }
        
        return result;
    }
};

class DiagnosticManager : public QObject
{
    Q_OBJECT
public:
    explicit DiagnosticManager(QObject *parent = nullptr);
    void runDiagnostics();

signals:
    void progressUpdated(int progress, const QString &message);
    void diagnosticsFinished(bool success, const DiagnosticResults &results);

private:
    void checkBattery();
    void checkDiskHealth();
    void checkAppleID();
    void checkSystemIntegrity();
    void parseBatteryInfo(const QString &output);
    void parseAppleIDInfo(const QString &output);
    void parseDiskInfo(const QString &output);
    void executeSystemCommand(const QString &command, const QString &description);
    void executeSystemCommand(const QString &command, const QStringList &args, const QString &description);

    QProcess *process;
    int currentStep;
    int currentProgress;
    bool overallSuccess;
    DiagnosticResults results;
};

#endif // DIAGNOSTICMANAGER_H
